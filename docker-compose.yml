services:
  web:
    build: .
    container_name: converter_api
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DJANGO_ENV=${DJANGO_ENV}
    volumes:
      - ./converter_api:/app/converter_api
    working_dir: /app/converter_api
    command: sh -c "
        if [ \"$DJANGO_ENV\" = \"production\" ]; then
          python manage.py migrate && gunicorn appointment_scheduling.wsgi:application --bind 0.0.0.0:8000;
        else
          python manage.py migrate && python manage.py runserver 0.0.0.0:8000;
        fi 
      "
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    env_file:
      - .env
    restart: always

  db:
    image: postgres:17.2
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    restart: always

  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    restart: always
